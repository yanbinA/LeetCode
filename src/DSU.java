/**
 *并查集是一种用于管理元素所属集合的数据结构,实现为一个森林, 其中每棵树表示一个集合,树中的节点表示对应集合中的元素.
 *
 * 顾名思义,并查集支持两种操作:
 *
 * 合并(Union): 合并两个元素所属集合(合并对应的树)
 * 查询(Find): 查询某个元素所属集合(查询对应的树的根节点), 这可以用于判断两个元素是否属于同一集合
 */
public class DSU {
    int[] dsu;
    /**
     * 初始化
     * 初始时, 每个元素都位于一个单独的集合, 表示为一棵只有根节点的树. 方便起见,我们将根节点的父亲设为自己
     */
    public void init() {
        for (int i = 0; i < dsu.length; i++) {
            dsu[i] = i;
        }
    }
    /**
     * 查询
     * 沿着树向上移动,直至找到根节点
     * 查询过程中经过的每个元素都属于该集合, 我们可以将其直接连到根节点以加快后续查询(路径压缩)
     */
    public int find(int x) {
        if (dsu[x] == x) {
            return x;
        }
        //路径压缩
        return dsu[x] = find(dsu[x]);
    }

    /**
     * 合并
     * 要合并两棵树, 我们只需要将一棵树的根节点连到另一棵树的根节点
     * 启发式合并
     * 合并时, 选择哪棵树的根节点作为新树的根节点会影响未来操作的复杂度.
     * 我们可以将节点较少或深度较小的树连到另一棵,以免发生退化. 启发式合并
     */
    public void merge(int x, int y) {
        dsu[find(x)] = find(y);
    }


}
